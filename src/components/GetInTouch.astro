<section id="contact" class="mb-12 reveal">
  <h2 class="text-2xl sm:text-3xl md:text-4xl font-heading font-bold mb-2 text-text underline decoration-accent/30 underline-offset-4 drop-shadow font-serif">
    {"Get in touch".split("").map((char, i) => (
      <span style={`opacity:0;display:inline-block;transform:translateY(16px);transition:opacity 0.5s ${0.2 + i*0.04}s,transform 0.5s ${0.2 + i*0.04}s;`} class="headline-letter">{char === " " ? "\u00A0" : char}</span>
    ))}
  </h2>
  <p class="text-base sm:text-lg font-semibold drop-shadow-sm text-white/90 mb-6">I'd love to hear from you! Fill out the form and I'll get back to you soon.</p>
  <form id="contact-form"
    class="flex flex-col gap-4 w-full max-w-xl mx-auto p-6 rounded-2xl shadow-2xl border border-accent/10 bg-gradient-to-br from-background via-background/90 to-accent/10 backdrop-blur-sm"
    autocomplete="off"
    action="javascript:void(0);"
  >
    <input type="hidden" name="_blacklist" value="viagra, casino, porn, sex, loan, free money, spam, test, buy now, click here, bitcoin, crypto, adult, nude, escort, dating, pills, drugs, scam, money, offer, win, winner, prize">
    <input type="text" name="_honey" style="display:none" tabindex="-1" autocomplete="off">
    <label class="flex flex-col gap-1 text-left relative">
      <span class="font-semibold text-text flex items-center gap-2">
        <i class="fa-solid fa-user text-accent"></i>
        Name
      </span>
      <input 
        type="text" 
        name="name" 
        required 
        class="px-5 py-3 rounded-lg border border-accent/20 focus:border-accent outline-none bg-background/80 text-text transition-all duration-200 focus:shadow-lg focus:shadow-accent/20"
        placeholder="Your name"
      />
    </label>
    <label class="flex flex-col gap-1 text-left relative">
      <span class="font-semibold text-text flex items-center gap-2">
        <i class="fa-solid fa-envelope text-accent"></i>
        Email
      </span>
      <input 
        type="email" 
        name="email" 
        required 
        class="px-5 py-3 rounded-lg border border-accent/20 focus:border-accent outline-none bg-background/80 text-text transition-all duration-200 focus:shadow-lg focus:shadow-accent/20"
        placeholder="you@email.com"
      />
    </label>
    <label class="flex flex-col gap-1 text-left relative">
      <span class="font-semibold text-text flex items-center gap-2">
        <i class="fa-solid fa-message text-accent"></i>
        Message
      </span>
      <textarea 
        name="message" 
        required 
        rows="5"
        class="px-5 py-3 rounded-lg border border-accent/20 focus:border-accent outline-none bg-background/80 text-text resize-none transition-all duration-200 focus:shadow-lg focus:shadow-accent/20"
        placeholder="Type your message..."
      ></textarea>
    </label>
    <button 
      id="contact-submit"
      type="submit" 
      class="stateful-button modern-send-btn mt-2 px-8 py-3 rounded-lg font-bold overflow-hidden relative"
      data-state="idle"
    >
      <span class="button-content idle-content flex items-center justify-center">
        <i class="fa-solid fa-paper-plane mr-2"></i>
        <span>Send</span>
      </span>
      <span class="button-content loading-content flex items-center justify-center opacity-0 pointer-events-none">
        <i class="fa-solid fa-spinner fa-spin mr-2"></i>
        <span>Sending...</span>
      </span>
      <span class="button-content success-content flex items-center justify-center opacity-0 pointer-events-none">
        <i class="fa-solid fa-circle-check mr-2"></i>
        <span>Sent!</span>
      </span>
      <span class="button-content error-content flex items-center justify-center opacity-0 pointer-events-none">
        <i class="fa-solid fa-circle-xmark mr-2"></i>
        <span>Error</span>
      </span>
    </button>
  </form>
  
  <style>
    .stateful-button {
      position: relative;
      min-height: 48px;
    }
    
    .button-content {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    .stateful-button[data-state="idle"] .idle-content {
      opacity: 1;
      transform: translateY(0);
    }
    
    .stateful-button[data-state="loading"] .loading-content {
      opacity: 1;
      transform: translateY(0);
    }
    
    .stateful-button[data-state="success"] {
      background-color: #059669;
      border-color: #059669;
    }
    
    .stateful-button[data-state="success"] .success-content {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
    
    .stateful-button[data-state="error"] {
      background-color: #dc2626;
      border-color: #dc2626;
    }
    
    .stateful-button[data-state="error"] .error-content {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
    
    /* Exit animations */
    .stateful-button[data-state="loading"] .idle-content,
    .stateful-button[data-state="success"] .loading-content,
    .stateful-button[data-state="error"] .loading-content {
      opacity: 0;
      transform: translateY(-15px);
    }
    
    .stateful-button[data-state="success"] .idle-content,
    .stateful-button[data-state="error"] .idle-content {
      opacity: 0;
      transform: translateY(-15px);
    }
    
    /* Initial state for success/error content */
    .success-content,
    .error-content {
      transform: translateY(15px) scale(0.8);
    }
    
    /* Disabled state */
    .stateful-button:disabled {
      cursor: not-allowed;
      opacity: 0.7;
    }
    
    /* Hover effects only for idle state */
    .stateful-button[data-state="idle"]:hover {
      background-color: #1d4ed8;
      transform: translateY(-1px);
      box-shadow: 0 10px 25px rgba(59, 130, 246, 0.3);
    }
    
    /* Success hover */
    .stateful-button[data-state="success"]:hover {
      background-color: #047857;
      transform: translateY(-1px);
      box-shadow: 0 10px 25px rgba(5, 150, 105, 0.3);
    }
    
    /* Error hover */
    .stateful-button[data-state="error"]:hover {
      background-color: #b91c1c;
      transform: translateY(-1px);
      box-shadow: 0 10px 25px rgba(220, 38, 38, 0.3);
    }

    .modern-send-btn {
      background: linear-gradient(90deg, #2563eb 0%, #1e40af 100%);
      box-shadow: 0 4px 24px 0 rgba(37,99,235,0.15);
      color: #fff;
      border: 1.5px solid rgba(37,99,235,0.25);
      backdrop-filter: blur(2px);
      border-radius: 0.75rem;
      position: relative;
      overflow: hidden;
      transition: all 0.2s;
    }
    .modern-send-btn:before {
      content: '';
      position: absolute;
      inset: 0;
      background: linear-gradient(120deg, #60a5fa33 0%, #1e40af22 100%);
      opacity: 0;
      transition: opacity 0.3s;
      z-index: 0;
    }
    .modern-send-btn:hover:before,
    .modern-send-btn:focus-visible:before {
      opacity: 1;
    }
    .modern-send-btn:hover,
    .modern-send-btn:focus-visible {
      transform: scale(1.045);
      box-shadow: 0 6px 32px 0 rgba(37,99,235,0.22);
      border-color: #60a5fa;
      outline: none;
    }
    .modern-send-btn i {
      font-size: 1.1em;
      z-index: 1;
    }
    .modern-send-btn span {
      z-index: 1;
    }
  </style>
  
  <script type="module" is:inline>
    const form = document.getElementById('contact-form');
    const submitBtn = document.getElementById('contact-submit');
    let resetTimeout;
    
    function setButtonState(state) {
      submitBtn.setAttribute('data-state', state);
    }
    
    function resetButton() {
      setButtonState('idle');
      submitBtn.disabled = false;
    }
    
    form.addEventListener('submit', async e => {
      e.preventDefault();
      if (form._honey.value) return;
      
      // Set loading state
      setButtonState('loading');
      submitBtn.disabled = true;
      
      try {
        const res = await fetch('https://formsubmit.co/ajax/973e073785e6010daaf5a5a2b48f6036', {
          method: 'POST',
          headers: { 'Accept': 'application/json' },
          body: new FormData(form)
        });
        
        if (res.ok) {
          // Success state
          setButtonState('success');
          form.reset();
          
          // Reset to idle after 2 seconds
          clearTimeout(resetTimeout);
          resetTimeout = setTimeout(() => {
            resetButton();
          }, 2000);
        } else {
          // Error state
          setButtonState('error');
          
          // Reset to idle after 3 seconds
          clearTimeout(resetTimeout);
          resetTimeout = setTimeout(() => {
            resetButton();
          }, 3000);
        }
      } catch {
        // Error state
        setButtonState('error');
        
        // Reset to idle after 3 seconds
        clearTimeout(resetTimeout);
        resetTimeout = setTimeout(() => {
          resetButton();
        }, 3000);
      }
    });
  </script>
</section>